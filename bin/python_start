#!/usr/bin/env python 
#flow-runtime: tmux
#flow-setup: docker stop $(docker ps -a -q)
#flow: 
#vim: set filetype=python
import clint as c
import sys
import os
import subprocess as s

# base_dir for project where docker file lives
base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))

# run a python command and pipe output accordingly
def python_shell(command, grab = False):

    # run the command and grab stderr/stdout to check if git repo or not
    if not grab:
        output = s.Popen(command, shell=True, stdout=sys.stdout, stderr=sys.stderr)
        output.wait()
        return

    # run the command and grab stderr/stdout to check if git repo or not
    output = s.Popen(command, shell=True, stdout=s.PIPE, stderr=s.PIPE)
    stdout, stderr = output.communicate()
    return stderr, stdout

# ordered dictionary of args
args = c.Args().grouped
tag_name = args["t"][1] if args.get("t") else "docker-etcd"

# build docker container
python_shell("cd %s && docker build -t %s  . " % (base_dir, tag_name))

# start the container ...
port = args["p"][1] if args.get("p") else 4001
host = args["h"][1] if args.get("h") else os.getenv("ETCD_HOST")

# start up etcd for development purposes
stderr, container_id = python_shell("docker run -d -t -p \"%s:%s\" %s --addr=\"%s:%s\"" % (port, port, tag_name, host, port), True)

# handle the case of the system not working - usually a port
if stderr:
    print stderr
    exit()

# seed the container's etcd instance as needed
if c.Args().files:
    for filepath in c.Args().files:
        filepath = os.path.abspath(filepath)
        python_shell("etcd-seed %s" % filepath)

# now shell in to the container, if desired
        

